#!/usr/bin/env python3
"""
Simple verification of the visual analysis fix
This creates a minimal test to verify the fix works correctly
"""

import json
import asyncio
import sys
from pathlib import Path

# Add the project root to Python path
sys.path.append(str(Path(__file__).parent))

async def verify_fix():
    """Verify the visual analysis fix by examining the code"""
    
    print("üîç Visual Analysis Fix Verification")
    print("="*40)
    
    # Read the operate.py file to verify our fix is in place
    operate_file = Path("core/operate.py")
    
    if not operate_file.exists():
        print("‚ùå core/operate.py not found")
        return
    
    with open(operate_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Check if the old hardcoded line is gone
    old_hardcoded = 'self.visual_analysis_output = {"elements": [], "text_snippets": []}'
    
    if old_hardcoded in content:
        # Find all occurrences 
        lines = content.split('\n')
        hardcoded_lines = []
        for i, line in enumerate(lines):
            if old_hardcoded.strip() in line:
                hardcoded_lines.append(i+1)
        
        print(f"‚ö†Ô∏è Found hardcoded empty visual analysis at lines: {hardcoded_lines}")
        print("   This suggests the fix may not be complete in all locations")
    
    # Check if our fix components are present
    fix_indicators = [
        "_take_screenshot(",
        "_perform_visual_analysis(",
        "parsed_content_list",
        "formatted_elements = []",
        "bbox_normalized",
        "pixel_x =",
        "pixel_y =",
        'element_dict["coordinates"]'
    ]
    
    present_indicators = []
    missing_indicators = []
    
    for indicator in fix_indicators:
        if indicator in content:
            present_indicators.append(indicator)
        else:
            missing_indicators.append(indicator)
    
    print(f"‚úÖ Fix components present: {len(present_indicators)}/{len(fix_indicators)}")
    for indicator in present_indicators:
        print(f"   ‚úì {indicator}")
    
    if missing_indicators:
        print(f"‚ùå Missing components:")
        for indicator in missing_indicators:
            print(f"   ‚úó {indicator}")
    
    # Look for the specific area where we made the fix (around line 1358)
    lines = content.split('\n')
    fix_area_start = None
    fix_area_end = None
    
    for i, line in enumerate(lines):
        if "Take screenshot for visual analysis" in line:
            fix_area_start = i
        elif fix_area_start and "except Exception as visual_error:" in line:
            fix_area_end = i
            break
    
    if fix_area_start and fix_area_end:
        print(f"\nüîß Fix area found: lines {fix_area_start+1} to {fix_area_end+1}")
        fix_code = '\n'.join(lines[fix_area_start:fix_area_end+3])
        
        # Check if this contains our key fix elements
        key_fixes = [
            "screenshot_path = await self._take_screenshot",
            "await self._perform_visual_analysis",
            "parsed_content_list",
            "formatted_elements",
            "bbox_normalized",
            "pixel_x =",
            "pixel_y =",
            'self.visual_analysis_output = {\n                                    "elements": formatted_elements,'
        ]
        
        fixes_present = 0
        for fix in key_fixes:
            if fix in fix_code:
                fixes_present += 1
        
        print(f"‚úÖ Key fix elements present: {fixes_present}/{len(key_fixes)}")
        
        if fixes_present == len(key_fixes):
            print(f"üéâ VISUAL ANALYSIS FIX VERIFICATION: PASSED!")
            print(f"   ‚úÖ Hardcoded empty visual analysis has been replaced")
            print(f"   ‚úÖ Screenshot capture pipeline is in place")
            print(f"   ‚úÖ Visual analysis pipeline is in place") 
            print(f"   ‚úÖ Element formatting with coordinates is in place")
            print(f"   ‚úÖ visual_analysis_output now gets populated with real data")
            print(f"\nüìã EXPECTED BEHAVIOR:")
            print(f"   ‚Ä¢ Before fix: visual_analysis_output = {{\"elements\": [], \"text_snippets\": []}}")
            print(f"   ‚Ä¢ After fix: visual_analysis_output contains actual parsed elements with coordinates")
            print(f"   ‚Ä¢ Chrome elements should now be detectable and clickable")
        else:
            print(f"‚ö†Ô∏è Some fix elements may be missing - only {fixes_present}/{len(key_fixes)} found")
    else:
        print(f"‚ùå Could not locate the fix area in the code")
    
    print(f"\nüß™ MANUAL TEST RECOMMENDATION:")
    print(f"   1. Restart Automoy V2")
    print(f"   2. Submit Chrome detection goal")  
    print(f"   3. Check logs for 'Visual analysis complete: X elements found'")
    print(f"   4. Verify elements list is no longer empty")

if __name__ == "__main__":
    asyncio.run(verify_fix())
